#include <iostream>

using namespace std; // Added namespace

class QuickSort
{
private:
    int *arr; // Pointer to the array
    int size; // Size of the array

    // Function to swap two elements
    void swap(int &a, int &b)
    {
        int temp = a;
        a = b;
        b = temp;
    }

    // Deterministic partition function
    int partitionDeterministic(int low, int high)
    {
        int pivot = arr[high]; // Choosing the last element as the pivot
        int i = low - 1;

        for (int j = low; j < high; j++)
        {
            if (arr[j] < pivot)
            {
                i++;
                swap(arr[i], arr[j]);
            }
        }
        swap(arr[i + 1], arr[high]); // Place pivot in the correct position
        return i + 1;                // Return the pivot index
    }

    // Randomized partition function
    int partitionRandomized(int low, int high)
    {
        int middleIndex = low + (high - low) / 2;
        swap(arr[middleIndex], arr[high]); // Move pivot to end
        int pivot = arr[high];
        int i = low - 1;

        for (int j = low; j < high; j++)
        {
            if (arr[j] < pivot)
            {
                i++;
                swap(arr[i], arr[j]);
            }
        }
        swap(arr[i + 1], arr[high]); // Place pivot in the correct position
        return i + 1;                // Return the pivot index
    }

    // Recursive Quick Sort using deterministic method
    void quickSortDeterministic(int low, int high)
    {
        if (low < high)
        {
            int pi = partitionDeterministic(low, high);
            quickSortDeterministic(low, pi - 1);
            quickSortDeterministic(pi + 1, high);
        }
    }

    // Recursive Quick Sort using randomized method
    void quickSortRandomized(int low, int high)
    {
        if (low < high)
        {
            int pi = partitionRandomized(low, high);
            quickSortRandomized(low, pi - 1);
            quickSortRandomized(pi + 1, high);
        }
    }

public:
    // Constructor to initialize the array
    QuickSort(int arr[], int size)
    {
        this->arr = arr;
        this->size = size;
    }

    // Public method to sort using deterministic Quick Sort
    void sortDeterministic()
    {
        quickSortDeterministic(0, size - 1);
    }

    // Public method to sort using randomized Quick Sort
    void sortRandomized()
    {
        quickSortRandomized(0, size - 1);
    }

    // Method to print the array
    void printArray()
    {
        for (int i = 0; i < size; i++)
        {
            cout << arr[i] << " "; // Changed std::cout to cout
        }
        cout << endl; // Changed std::endl to endl
    }
};

int main()
{
    int n;

    // Taking user input for array size
    cout << "Enter the number of elements: ";
    cin >> n;

    // Dynamically allocating memory for the array
    int *arr = new int[n];

    // Taking user input for array elements
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    // Creating QuickSort object
    QuickSort qs(arr, n);

    cout << "Original array: ";
    qs.printArray();

    // Sorting using deterministic Quick Sort
    qs.sortDeterministic();
    cout << "Sorted array (Deterministic): ";
    qs.printArray();

    // Sorting using randomized Quick Sort
    // Resetting the array to original for demonstration
    cout << "Enter the elements of the array again for Randomized sort: ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    QuickSort qsRandomized(arr, n);
    qsRandomized.sortRandomized();
    cout << "Sorted array (Randomized): ";
    qsRandomized.printArray();

    // Free the dynamically allocated memory
    delete[] arr;

    return 0;
}
